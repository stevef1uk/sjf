// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountsParams creates a new GetAccountsParams object
// with the default values initialized.
func NewGetAccountsParams() *GetAccountsParams {
	var ()
	return &GetAccountsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountsParamsWithTimeout creates a new GetAccountsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountsParamsWithTimeout(timeout time.Duration) *GetAccountsParams {
	var ()
	return &GetAccountsParams{

		timeout: timeout,
	}
}

// NewGetAccountsParamsWithContext creates a new GetAccountsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccountsParamsWithContext(ctx context.Context) *GetAccountsParams {
	var ()
	return &GetAccountsParams{

		Context: ctx,
	}
}

// NewGetAccountsParamsWithHTTPClient creates a new GetAccountsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccountsParamsWithHTTPClient(client *http.Client) *GetAccountsParams {
	var ()
	return &GetAccountsParams{
		HTTPClient: client,
	}
}

/*GetAccountsParams contains all the parameters to send to the API endpoint
for the get accounts operation typically these are written to a http.Request
*/
type GetAccountsParams struct {

	/*ID
	  PK

	*/
	ID int32
	/*Name
	  PK

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get accounts params
func (o *GetAccountsParams) WithTimeout(timeout time.Duration) *GetAccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get accounts params
func (o *GetAccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get accounts params
func (o *GetAccountsParams) WithContext(ctx context.Context) *GetAccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get accounts params
func (o *GetAccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get accounts params
func (o *GetAccountsParams) WithHTTPClient(client *http.Client) *GetAccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get accounts params
func (o *GetAccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get accounts params
func (o *GetAccountsParams) WithID(id int32) *GetAccountsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get accounts params
func (o *GetAccountsParams) SetID(id int32) {
	o.ID = id
}

// WithName adds the name to the get accounts params
func (o *GetAccountsParams) WithName(name string) *GetAccountsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get accounts params
func (o *GetAccountsParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param id
	qrID := o.ID
	qID := swag.FormatInt32(qrID)
	if qID != "" {
		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
